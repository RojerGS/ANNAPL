∇ {net} ← target (net _Train) input
    ;layer;dx;dW;db;x;xs
    ⍝ Train the given network on the `input` vector given,
    ⍝ assuming `target` specifies the expected net output.
    ⍝ Uses the backpropagation algorithm to compute the partial derivatives
    ⍝ efficiently.

    xs ← net _FeedForward input
    dx ← target net.LossFn_.DLoss⊃⌽xs
    :For (x layer) :InEach ⌽¨ (¯1↓xs) net.layers
        db ← dx×layer.ActFn_.DF layer.bias+layer.weights+.×x
        dx ← db+.×⍨⍉layer.weights
        dW ← db+.×⍉x
        layer.bias -← net.lr×db
        layer.weights -← net.lr×dW
    :EndFor
∇
